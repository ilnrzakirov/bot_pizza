from aiogram import Dispatcher, types
from aiogram.types import ContentType, CallbackQuery
from loguru import logger

from keyboards.clients import get_menu_button
from settings import groups


async def menu(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    keyboard = await get_menu_button()
    await message.answer("üçΩ  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


async def delevery(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    await message.answer("–ß—Ç–æ —Ç–æ –µ—Å—Ç—å")


async def stocks(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    await message.answer("–ß—Ç–æ —Ç–æ –µ—Å—Ç—å")

async def basket(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    await message.answer("–ß—Ç–æ —Ç–æ –µ—Å—Ç—å")

async def locations(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    await message.answer("–ß—Ç–æ —Ç–æ –µ—Å—Ç—å")

async def help_menu(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.username} - id {message.from_user.id}")
    await message.answer("–ß—Ç–æ —Ç–æ –µ—Å—Ç—å")

async def get_group_items(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {call.data} –æ—Ç {call.from_user.username} - id {call.from_user.id}")
    await call.message.answer(text="Ok")

def register_handlers_client(dispatcher: Dispatcher):
    dispatcher.register_message_handler(menu, text="üçΩ –ú–µ–Ω—é", content_types=ContentType.TEXT)
    dispatcher.register_message_handler(delevery, text="üöö –û –¥–æ—Å—Ç–∞–≤–∫–µ PizzaHouse", content_types=ContentType.TEXT)
    dispatcher.register_message_handler(stocks, text="üî• –ê–∫—Ü–∏–∏", content_types=ContentType.TEXT)
    dispatcher.register_message_handler(basket, text="üõí –ö–æ—Ä–∑–∏–Ω–∞", content_types=ContentType.TEXT)
    dispatcher.register_message_handler(locations, text="üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏", content_types=ContentType.TEXT)
    dispatcher.register_message_handler(help_menu, text="‚öô –ü–æ–º–æ—â—å", content_types=ContentType.TEXT)
    dispatcher.register_callback_query_handler(get_group_items, lambda call: call.data in groups.keys(),)
